{int n = 1}	// global

Start  -> func int var initializer: {emit("func","int")} begin A  return var end Start | ɛ

A ->  if  {backpatch(A.t, n)} EXP1:{A.next = n; emit(“goto”)}: begin A end B A |
		for Initializer ,EXP1 , Initializer2:{A.start = n} {backpatch(A.t, n)}	{emit(“goto”, A.start);backpatch(A.f, n)}begin A  end A | 
		print ID ; A {emit("print" , ID.lex)}| 
		print ‘str’; A {emit("print" , str.lex)}| 
		in variable ; A {emit("in" , variable.lex)}|
		Initializer A  | return ID {emit("return" , ID.lex)}|

B -> elif {backpatch(B.t, n)} EXP1:{A.next = n; emit(“goto”)} begin A end  B | C  
 
C ->  else: begin A end   {  C.f = n; emit(“goto” )}  

Initializer ->   var <- EXP2  int ;  Initializer  emit{  var.lex + "int" + ";"}  | var int ; Initializer  emit{ var.lex + "=" + "int"}| Initializer2, Initializer |  var ; {Initializer.w = var.lex} | var , Initializer {Initializer.w = var.lex} | ;  emit{";"}

Initializer2 ->   ID <- EXP2   {Initializer2.q  = Id.p + "=" + EXP2.q}  {tmp = newTmp(); emit(tmp, “=”, E1.n, “+”, T.n);E.n = tmp}


EXP1 ->   E RO E  {EXP1.t = n; 
					emit(“if”,E1.lex,RO.lex,E2.lex,”goto”); 
						BE.f = n; emit(“goto”)}}

E ->  T E'  {E.z = T.z + E'.z }

E' ->  + T E'  {E'.w = "+" + T.t + E'.t}  |  {E'.w = "-" + T.t + E'.t} - T E' | ^

T ->  F T'	{T.q = F.s + T'.s}

T' ->  * F T'  {"*" + F.s + T'.s}  | / F T'  {"/" + F.s + T'.s} | ^   

F ->  id  {F.h = id.lex } | num  {F.h= id.lex}| E {E.h= id.lex}

RO ->  == {RO.v="=="}   |  !=  {RO.v="!="}   | >  {RO.v=">"}  |  >= {RO.v=">="}  | < {RO.v="<"}   | <=  {RO.v="<="}  

ID ->  var  {ID.v=var.lex}| num {ID.v=num.lex} | char{ID.v=char.lex}
